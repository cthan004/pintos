			+--------------------+
			|        CS 153      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Chanapong Thananiwej <cthan004@ucr.edu> <861073158>
Marco Morelos <mmore019@ucr.edu> <861109791>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Add to timer.c:
  struct list sleepList; // List of sleeping threads

The sleepList is used to keep track of the sleeping threads

Add to thread.h:
  in struct thread:
    int64_t awakeTime; // Store thread wake up time
    struct list_elem sleepElem; // Element of sleepList

awakeTime stores the time that the thread should wake up on.
sleepElem is a temporary variable used to iterate through the sleepList.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Calculate the awake time for thread t.
Put t in sleeping list and block it.
Timer interrupt wakes thread t up when the current time is equal to awake time. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Sorted the sleeping list in awake time order from lowest to highest.
This way we only have to check the first few threads in the beginning of the list.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Since timer is an external interrupt,
we have to disable interrupt to avoid race condition.
We cannot use other synchronization methods.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

We disable interrupts because external interrupt handler cannot sleep.
There is no concurrency when interrupt is off.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose to use sorted list to minimize time since we only have
to check the first few elements in the beginning of the list.
This design is superior than looping through the whole list
and check every threads.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Add to thread.c:
  struct list donorList; // List of donors
  
donorList contains threads that are waiting on the lock.

Add to thread.h:
  in struct thread:
    struct list_elem donorElem; // Element of donorList
    struct lock *tLock; // The thread lock
    
tLock holds the lock.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

T1-(wait(Lock1))-> T2-(lock1)(wait(Lock2))-> T3(Lock2)

In this example, we have a high priority thread T1 waiting for a lock
to be released in T2. T2 likewise is waiting for the lock in T3 to be
released. The priority is recursively donated down this line so that
all three threads have the same priority. This T3 will lose this
donation upon releasing the lock. Likewise, T2 will follow.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We make sure that the thread donates its priority recursively downwards
in the case there are nesting locks. These threads will then 
run, starting from the bottom and working their way up until the lock is
released. As each nested lock is released, the threads' priority is reverted
to the priority it had before it recieved the donation. Once this is done, 
the highest priority thread will be able to wake first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When lock_acquire() is called, the OS checks to see if any lower priority
threads currently holds the lock. If this is the case, priority
donation occurs so that the lock can be released. This is done 
recursively downwards so that, in the case of nested locks, the appropriate
threads can be run. Until the lock is released, the thread is set to wait.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release() is called, the thread that is currently holding the
lock releases the lock. The semaphore variable is incremented and another
thread is allowed in. Since a higher priority thread was waiting for the
lock, the thread loses its donated priority by being reverted to its
original priority. The OS then will look at the priority queue and run
the thread with the highest priority.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

If thread_set_priority() is called but another thread is also
competing to change the priority of this thread, we have a race condition
where both threads try to change the same piece of information and whichever
executes last, gets to change the thread's priority. This may happen if
a thread decides to donate priority while this function is set in motion.

We cannot use lock on external interrupt handler.
Therefore we have to disable interrupt.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We use list because its implementation is given.
We use lock when there are race conditions and
only disable interrupt when other synchonization methods do not work.


			  ADVANCED SCHEDULER
			    (If Attempted)
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0    
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
