         +--------------------------+
         |          CS 153          |
         | PROJECT 2: USER PROGRAMS |
         |     DESIGN DOCUMENT      |
         +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Marco Morelos      mmore019@ucr.edu
Chanapong Thananiwej cthan004@ucr.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

         ARGUMENT PASSING
         ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We use a for loop to tokenize the entire argument string using strtok_r.
We store the tokens into argv[] as they are tokenized.
The tokens will naturally be stored in order because strtok_r
progresses through the argument string from left to right.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok modifies the string that is being tokenized while
strtok_r does not.
This is important because pintos should not modify the strings
that the user is passing into the system. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix approach means that the delimiters for the argument
tokenization can be explicitly chosen by the user instead of being
forced by the OS.

Also, tokenization is not something that absolutely needs to be
implemented into the kernel.
Implementing the tokenization into the kernel would also mean that any bugs in
the tokenization would be passed on to the user.

In summary, the unix way pushes the responsibilty of upkeep to the user and
gives them more freedom in the implementation.

           SYSTEM CALLS
           ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When files are opened, file descriptors are created.
File descriptors are unique just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We check if the pointer points to a valid user data.
Then we directly access it and read or write.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The least is 1 and the greatest is 4096. For 2 bytes of data, the
least is also 1, but the greatest improved to 2048. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

We traverse childList to find the child. If the child is not found,
then the child has already been removed.

If the child is found, we block the parent with a lock and
release after the child has finished.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We check every pointers in the beginning to make sure that 
it is not null. This also includes every pointer arguments.
We only allocated resources as needed so that there are less
resources to free when we found a bad pointer.

Example: Read system call.
We first check every pointers to make sure it is valid.
We then read in the arguments and check them if they are pointers.
We also verify that the file descriptors have valid files.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We down a semaphore to block before loading to make sure
that "exec" return after load finished. We then up after loading.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When P calls wait before C exits, P is blocked. We unblock after
C exits. The kernel frees C and P frees some C data.

When P calls after C exits, we just have to free C data in P.

When P terminates before C, P updates C. The new parent of C
is the parent of P.

P terminates after C is the same case as P calls wait after
C exits.

There are no more special cases.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We followed the TA's implementation.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We used list because it is natural and simple.
We also are given list implementation. One disadvantage
is that searching takes a long time when the list is large.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We do not plan to change the default mapping because it is
working.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
